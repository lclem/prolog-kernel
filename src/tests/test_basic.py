import pytest
from prolog_kernel.kernel import PrologKernel

@pytest.fixture
def kernel():
    return PrologKernel()

#def test_get_expression_12(kernel): # cursor at the end of the word
#    kernel.code = "module test5 where\nproj1 : ∀ {A B : Set} → A → B → A\nproj1 x y = {! y !}\n\nproj' : ∀ {A B : Set} → A → B → A\nproj' = proj1\n\nproj'' : ∀ {A B : Set} → A → B → A\nproj'' = proj1"
#    assert (167, 172, "proj1") == kernel.get_expression(kernel.code, 172)

#def test_listing_solution_parser_0(kernel):
#    input = "Listing solution(s) 0-9\n0  cong suc (+-assoc m n p)\n1  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m p p)) ⟩\nsuc (m + (n + p)) ∎\n2  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m p n)) ⟩\nsuc (m + (n + p)) ∎\n3  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m p m)) ⟩\nsuc (m + (n + p)) ∎\n4  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m n p)) ⟩\nsuc (m + (n + p)) ∎\n5  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m n n)) ⟩\nsuc (m + (n + p)) ∎\n6  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m n m)) ⟩\nsuc (m + (n + p)) ∎\n7  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m m p)) ⟩\nsuc (m + (n + p)) ∎\n8  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m m n)) ⟩\nsuc (m + (n + p)) ∎\n9  begin\nsuc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\nsuc (m + (n + p)) ≡⟨\nsym (cong (λ _ → suc (m + (n + p))) (+-assoc m m m)) ⟩\nsuc (m + (n + p)) ∎\n"
#    output = kernel.listing_solution_parser(input)
#    assert output == ['cong suc (+-assoc m n p)', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m p p)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m p n)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m p m)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m n p)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m n n)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m n m)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m m p)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m m n)) ⟩\n  suc (m + (n + p)) ∎', 'begin\n  suc (m + n + p) ≡⟨ cong suc (+-assoc m n p) ⟩\n  suc (m + (n + p)) ≡⟨\n  sym (cong (λ _ → suc (m + (n + p))) (+-assoc m m m)) ⟩\n  suc (m + (n + p)) ∎\n  ']